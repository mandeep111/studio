// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI-powered tool to suggest potential problem/solution creator pairings based on public reviews and upvotes.
 *
 * - suggestPairings - A function that handles the pairing suggestion process.
 * - SuggestPairingsInput - The input type for the suggestPairings function.
 * - SuggestPairingsOutput - The return type for the suggestPairings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestPairingsInputSchema = z.object({
  investorProfile: z.string().describe('A description of the investor profile, including their investment interests and criteria.'),
  problemCreators: z.array(z.object({
    creatorId: z.string().describe('The unique identifier of the problem creator.'),
    reputationScore: z.number().describe('The reputation score of the problem creator based on public reviews and upvotes.'),
    expertise: z.string().describe('The areas of expertise of the problem creator.'),
  })).describe('A list of problem creators with their reputation scores and areas of expertise.'),
  solutionCreators: z.array(z.object({
    creatorId: z.string().describe('The unique identifier of the solution creator.'),
    reputationScore: z.number().describe('The reputation score of the solution creator based on public reviews and upvotes.'),
    expertise: z.string().describe('The areas of expertise of the solution creator.'),
  })).describe('A list of solution creators with their reputation scores and areas of expertise.'),
});

export type SuggestPairingsInput = z.infer<typeof SuggestPairingsInputSchema>;

const SuggestPairingsOutputSchema = z.object({
  suggestedPairings: z.array(z.object({
    problemCreatorId: z.string().describe('The unique identifier of the suggested problem creator.'),
    solutionCreatorId: z.string().describe('The unique identifier of the suggested solution creator.'),
    matchReason: z.string().describe('The AI’s reasoning for suggesting this pairing.'),
  })).describe('A list of suggested problem/solution creator pairings with the AI’s reasoning for each pairing.'),
});

export type SuggestPairingsOutput = z.infer<typeof SuggestPairingsOutputSchema>;

export async function suggestPairings(input: SuggestPairingsInput): Promise<SuggestPairingsOutput> {
  return suggestPairingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestPairingsPrompt',
  input: {schema: SuggestPairingsInputSchema},
  output: {schema: SuggestPairingsOutputSchema},
  prompt: `You are an AI assistant designed to suggest potential problem/solution creator pairings to investors based on their profile, and the creators\' reputation and expertise.

Investor Profile: {{{investorProfile}}}

Problem Creators:
{{#each problemCreators}}
- Creator ID: {{{creatorId}}}, Reputation: {{{reputationScore}}}, Expertise: {{{expertise}}}
{{/each}}

Solution Creators:
{{#each solutionCreators}}
- Creator ID: {{{creatorId}}}, Reputation: {{{reputationScore}}}, Expertise: {{{expertise}}}
{{/each}}

Based on this information, suggest potential problem/solution creator pairings that would be valuable for the investor. Explain your reasoning for each pairing.

Suggested Pairings:
{{#each suggestedPairings}}
- Problem Creator ID: {{{problemCreatorId}}}, Solution Creator ID: {{{solutionCreatorId}}}, Reason: {{{matchReason}}}
{{/each}}`,
});

const suggestPairingsFlow = ai.defineFlow(
  {
    name: 'suggestPairingsFlow',
    inputSchema: SuggestPairingsInputSchema,
    outputSchema: SuggestPairingsOutputSchema,
  },
  async input => {
    const {text} = await ai.generate({
        prompt: prompt,
        input
    });
    try {
      // Attempt to parse the AI's text response as JSON.
      const parsedOutput = JSON.parse(text);
      return parsedOutput as SuggestPairingsOutput;
    } catch (error) {
      // If parsing fails, return a default object or handle the error as needed.
      console.error('Failed to parse AI output:', error);
      console.error('AI output:', text);
      return {
        suggestedPairings: [], // Return an empty array or handle the error as needed.
      };
    }
  }
);
