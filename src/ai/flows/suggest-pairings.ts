// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI-powered tool to suggest potential problem/solution creator pairings based on public reviews and upvotes.
 *
 * - suggestPairings - A function that handles the pairing suggestion process.
 * - SuggestPairingsInput - The input type for the suggestPairings function.
 * - SuggestPairingsOutput - The return type for the suggestPairings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestPairingsInputSchema = z.object({
  investorProfile: z.string().describe('A description of the investor profile, including their investment interests and criteria.'),
  problems: z.array(z.object({
    id: z.string().describe('The unique identifier of the problem.'),
    title: z.string().describe('The title of the problem.'),
    description: z.string().describe('The description of the problem.'),
    creatorId: z.string().describe('The unique identifier of the problem creator.'),
  })).describe('A list of problems available for investment.'),
  problemCreators: z.array(z.object({
    creatorId: z.string().describe('The unique identifier of the problem creator.'),
    reputationScore: z.number().describe('The reputation score of the problem creator based on public reviews and upvotes.'),
    expertise: z.string().describe('The areas of expertise of the problem creator.'),
  })).describe('A list of problem creators with their reputation scores and areas of expertise.'),
  solutionCreators: z.array(z.object({
    creatorId: z.string().describe('The unique identifier of the solution creator.'),
    reputationScore: z.number().describe('The reputation score of the solution creator based on public reviews and upvotes.'),
    expertise: z.string().describe('The areas of expertise of the solution creator.'),
  })).describe('A list of solution creators with their reputation scores and areas of expertise.'),
});

export type SuggestPairingsInput = z.infer<typeof SuggestPairingsInputSchema>;

const SuggestPairingsOutputSchema = z.object({
  suggestedPairings: z.array(z.object({
    problemId: z.string().describe('The unique identifier of the problem being addressed.'),
    problemTitle: z.string().describe('The title of the problem being addressed.'),
    problemCreatorId: z.string().describe('The unique identifier of the suggested problem creator.'),
    solutionCreatorId: z.string().describe('The unique identifier of the suggested solution creator.'),
    matchReason: z.string().describe('The AI’s reasoning for suggesting this pairing.'),
  })).describe('A list of suggested problem/solution creator pairings with the AI’s reasoning for each pairing.'),
});

export type SuggestPairingsOutput = z.infer<typeof SuggestPairingsOutputSchema>;

export async function suggestPairings(input: SuggestPairingsInput): Promise<SuggestPairingsOutput> {
  return suggestPairingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestPairingsPrompt',
  input: {schema: SuggestPairingsInputSchema},
  output: {schema: SuggestPairingsOutputSchema},
  prompt: `You are an expert matchmaker for a venture capital firm. Your goal is to connect promising problem creators with innovative solution creators, based on an investor's profile.

Analyze the investor's profile, the list of available problems, and the profiles of the problem and solution creators.

Suggest 1-3 high-potential pairings. For each pairing, you must identify a specific problem and then match its creator with a suitable solution creator. Your reasoning should explain why the problem aligns with the investor's interests and why the two creators are a good match based on their expertise and reputation.

**Investor Profile:**
{{{investorProfile}}}

**Available Problems:**
{{#each problems}}
- Problem ID: {{{id}}}, Title: {{{title}}}, Creator ID: {{{creatorId}}}, Description: {{{description}}}
{{/each}}

**Problem Creators:**
{{#each problemCreators}}
- Creator ID: {{{creatorId}}}, Reputation: {{{reputationScore}}}, Expertise: {{{expertise}}}
{{/each}}

**Solution Creators:**
{{#each solutionCreators}}
- Creator ID: {{{creatorId}}}, Reputation: {{{reputationScore}}}, Expertise: {{{expertise}}}
{{/each}}

Provide your output in the format specified.`,
});

const suggestPairingsFlow = ai.defineFlow(
  {
    name: 'suggestPairingsFlow',
    inputSchema: SuggestPairingsInputSchema,
    outputSchema: SuggestPairingsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      return { suggestedPairings: [] };
    }
    return output;
  }
);
