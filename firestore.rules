
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // This function is safe for non-transactional checks but fails in transactional ones.
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow delete: if isAdmin();
      
      // Critical Rule: Allow profile updates by owner/admin, OR a specific 'points' update by any signed-in user for upvotes.
      // This rule does NOT use get() in the points-update path, making it safe for transactions.
      allow update: if (isOwner(userId) || isAdmin()) || (
        isSignedIn() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points']) &&
        (request.resource.data.points == resource.data.points + 20 || request.resource.data.points == resource.data.points - 20)
      );
    }

    // --- Ideas Rules ---
    match /ideas/{ideaId} {
      allow read;
      allow create: if isSignedIn();
      allow delete: if isAdmin();
      // Allow only upvote updates by any signed-in user.
      allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy']);
    }

    // --- Problems Rules ---
    match /problems/{problemId} {
      allow read;
      allow create: if isSignedIn();
      allow delete: if isAdmin();

      allow update: if 
        // Allow standard upvotes by any user
        (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy'])) ||
        // Allow admin price approval
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['priceApproved'])) ||
        // Allow solution count to be updated (when an admin deletes an associated solution)
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['solutionsCount']));
    }
    
    // --- Solutions Rules ---
    match /solutions/{solutionId} {
      allow read;
      allow create: if isSignedIn();
      allow delete: if isAdmin();

      allow update: if 
        // Allow standard upvotes by any user
        (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy'])) ||
        // Allow admin price approval
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['priceApproved']));
    }

    // --- Deals, Messages, Notifications ---
    match /deals/{dealId} {
      // Participants can read, only investors/admins can create.
      allow read: if isSignedIn() && (request.auth.uid in [resource.data.investor.userId, resource.data.problemCreator.userId, resource.data.solutionCreator.userId]);
      allow create: if isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Investor', 'Admin']);
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && (request.auth.uid in [
          get(/databases/$(database)/documents/deals/$(dealId)).data.investor.userId,
          get(/databases/$(database)/documents/deals/$(dealId)).data.problemCreator.userId,
          get(/databases/$(database)/documents/deals/$(dealId)).data.solutionCreator.userId
        ]);
      }
    }
    
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId) || (resource.data.userId == 'admins' && isAdmin());
      // Notifications are created server-side via trusted code.
      allow create: if false;
      allow update: if isOwner(resource.data.userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
  }
}
