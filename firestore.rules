
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isCurrentUserAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'Admin';
    }
    
    function isCurrentUserInvestor() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'Investor';
    }

    // Users can be read by anyone, but only edited by themselves or an admin.
    match /users/{userId} {
      allow read: if true;
      allow create: if !exists(/databases/$(database)/documents/users/$(userId));
      allow update: if isOwner(userId) || isCurrentUserAdmin();
      allow delete: if isCurrentUserAdmin();
    }

    // Public content can be read by anyone.
    // Creation requires being a premium user.
    // Updates can only be done by the creator or admin.
    match /{collectionName}/{itemId} where collectionName in ['problems', 'solutions', 'ideas', 'businesses'] {
      allow read: if true;
      allow create: if isSignedIn() && getUserData(request.auth.uid).isPremium == true;
      allow update: if isSignedIn() && (isOwner(resource.data.creator.userId) || isCurrentUserAdmin());
      allow delete: if isCurrentUserAdmin();
    }
    
    // Deals can only be read/updated by participants.
    match /deals/{dealId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isCurrentUserInvestor();
      
      // Messages can be read/created by deal participants.
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/deals/$(dealId)).data.participantIds;
      }
    }
    
    // Notifications can be managed by the recipient or admins.
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && (isOwner(resource.data.userId) || (resource.data.userId == 'admins' && isCurrentUserAdmin()));
      allow create: if true; // Created by server-side actions
    }
    
    // Payments are created server-side and read by admins.
    match /payments/{paymentId} {
        allow read: if isCurrentUserAdmin();
        allow create: if true; // Created via server action/webhook
    }
    
    // Ads can be read by anyone, managed by Admins.
    match /ads/{adId} {
        allow read: if true;
        allow create, update, delete: if isCurrentUserAdmin();
    }
    
    // Settings are readable by anyone, writable only by admins.
    match /settings/{settingId} {
        allow read: if true;
        allow write: if isCurrentUserAdmin();
    }

    // Tags are public, updated server-side.
    match /tags/{tagId} {
        allow read: if true;
        allow write: if true;
    }
  }
}
