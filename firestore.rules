rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check the user's role from their profile in the 'users' collection.
      // Use this for single-document reads or writes, NOT for collection queries.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isIncomingDataValid(validFields, incomingData) {
      // Ensures no extra fields are being written.
      return incomingData.keys().hasOnly(validFields);
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Anyone can read user profiles for display purposes (avatars, names).
      allow read: if request.auth != null;
      // Only the owner can update their profile.
      allow update: if isOwner(userId);
      // Users can only be created with a specific set of fields.
      allow create: if request.resource.data.uid == request.auth.uid &&
                      isIncomingDataValid(['uid', 'email', 'name', 'role', 'expertise', 'avatarUrl', 'points', 'isPremium', 'unreadDealMessages', 'dealsCount', 'dealsCompletedCount', 'dealsCancelledCount', 'upvotes', 'upvotedBy'], request.resource.data);
    }
    
    // --- Deals and Messages ---
    match /deals/{dealId} {
      // isParticipant() uses get() and is only safe for subcollection rules where we check the parent.
      function isParticipant() {
        return request.auth.uid in get(/databases/$(database)/documents/deals/$(dealId)).data.participantIds;
      }
      
      // For collection queries and single reads, use resource.data.
      // This is the CRITICAL FIX. `resource.data` works for queries, `get()` does not.
      allow read: if request.auth.uid in resource.data.participantIds;

      // Only the investor can create a deal.
      allow create: if request.auth.uid == request.resource.data.investor.userId;
      
      // Only a participant can update a deal's status.
      allow update: if request.auth.uid in resource.data.participantIds &&
                      request.resource.data.status != resource.data.status;

      match /messages/{messageId} {
        // Here, using the isParticipant() function with get() is correct and necessary.
        allow read, create: if isParticipant();
      }
    }

    // --- Main Content (Problems, Solutions, Ideas, Businesses) ---
    match /{collection}/{itemId} {
      // Anyone can read content.
      allow read: if true;

      // Users can only create content if they are the creator specified in the document.
      allow create: if request.auth.uid == request.resource.data.creator.userId;

      // Only the creator can update their own content. Admins can also update (e.g., for moderation).
      allow update: if request.auth.uid == resource.data.creator.userId || isAdmin();

      // Only the creator or an admin can delete content.
      allow delete: if request.auth.uid == resource.data.creator.userId || isAdmin();
    }
    
    // --- Notifications ---
    match /notifications/{notificationId} {
      // Users can read their own notifications.
      // Admins can also read system-wide 'admins' notifications.
      // This rule structure is safe for the separate queries being made on the client.
      allow read: if request.auth != null && 
                  (resource.data.userId == request.auth.uid || 
                  (isAdmin() && resource.data.userId == 'admins'));

      // Server-only writes.
      allow create, update, delete: if false;
    }
    
    // --- Tags ---
    match /tags/{tag} {
      // Anyone can read the tag list.
      allow read: if true;
      // Only authenticated users can add to the tag counts (via server actions).
      allow write: if request.auth != null;
    }

    // --- Admin-Only Collections ---
    match /settings/{docId} {
      allow read: if true; // Settings might be needed client-side.
      allow write: if isAdmin(); // Only admins can change settings.
    }

    match /ads/{adId} {
      allow read: if true; // Ads need to be readable by everyone.
      allow write: if isAdmin(); // Only admins can create/edit ads.
    }
    
    match /payments/{paymentId} {
      allow read, write: if isAdmin(); // Only admins can view payment history.
    }
  }
}
