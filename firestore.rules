
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, role) {
      return isSignedIn() && getUserData(userId).role == role;
    }
    
    function isChangingRole() {
      return request.resource.data.role != resource.data.role;
    }
    
    function isUpdatingAllowedProfileFields() {
      // Only these fields can be updated by a user on their own profile.
      let allowedFields = ['name', 'expertise', 'avatarUrl'];
      // This ensures no other fields are being maliciously added.
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    
    function isDealStatusUpdate(dealId) {
      let deal = get(/databases/$(database)/documents/deals/$(dealId)).data;
      return request.resource.data.status != deal.status && request.resource.data.keys().hasAny(['status', 'updatedAt']);
    }

    // --- Collections ---
    match /users/{userId} {
      // Anyone can view a user's profile for leaderboards, cards, etc.
      allow read: if true;

      // Users can only update their own name, expertise, and avatarUrl.
      allow update: if isOwner(userId) && isUpdatingAllowedProfileFields();

      // Users can create their own profile upon signup.
      allow create: if isOwner(userId);
    }

    match /problems/{problemId} {
      allow read: if true;
      
      // The creator must be the signed-in user.
      allow create: if isSignedIn() && isOwner(request.resource.data.creator.userId);
      // Only the original creator can update their problem.
      allow update: if isSignedIn() && isOwner(resource.data.creator.userId);
      
      // Only Admins can delete a problem.
      allow delete: if isUserRole(request.auth.uid, 'Admin');
    }

    match /solutions/{solutionId} {
      allow read: if true;

      allow create: if isSignedIn() && isOwner(request.resource.data.creator.userId);
      allow update: if isSignedIn() && isOwner(resource.data.creator.userId);
      
      allow delete: if isUserRole(request.auth.uid, 'Admin');
    }
    
    match /ideas/{ideaId} {
      allow read: if true;

      allow create: if isSignedIn() && isOwner(request.resource.data.creator.userId);
      allow update: if isSignedIn() && isOwner(resource.data.creator.userId);

      allow delete: if isUserRole(request.auth.uid, 'Admin');
    }
    
    match /businesses/{businessId} {
       allow read: if true;

      allow create: if isSignedIn() && isOwner(request.resource.data.creator.userId);
      allow update: if isSignedIn() && isOwner(resource.data.creator.userId);

      allow delete: if isUserRole(request.auth.uid, 'Admin');
    }

    match /deals/{dealId} {
      // Only participants can read the deal info or create it.
      allow read, create: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      // Only the investor can update the status of the deal.
      allow update: if isSignedIn() && request.auth.uid == resource.data.investor.userId;
    }

    match /deals/{dealId}/messages/{messageId} {
      // Only participants can read or create messages.
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/deals/$(dealId)).data.participantIds;
    }

    match /notifications/{notificationId} {
      // A user can read a notification if it's theirs.
      // An Admin can read a notification if it's for 'admins'.
      allow read: if isOwner(resource.data.userId) || (isUserRole(request.auth.uid, 'Admin') && resource.data.userId == 'admins');
      
      // Notifications are created by the server (via actions), not directly by clients.
      // However, we allow create here to let server actions work, but no client could pass this rule.
      allow create: if false; 
      
      allow update, delete: if false;
    }
    
    match /tags/{tagId} {
      allow read: if true;
      // Tags are managed by server actions.
      allow write: if false; 
    }
    
    match /settings/payment {
        allow read: if true;
        allow write: if isUserRole(request.auth.uid, 'Admin');
    }
    
    match /ads/{adId} {
        allow read: if true;
        allow write: if isUserRole(request.auth.uid, 'Admin');
    }

    match /payments/{paymentId} {
      // Only admins can see the full payment history.
      allow read: if isUserRole(request.auth.uid, 'Admin');
      // Payments are only written from the backend webhook.
      allow write: if false; 
    }
  }
}
    