
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isRole(role) {
      // This function uses get() and CANNOT be used in rules for transactional writes.
      return isAuth() && getUserData(request.auth.uid).role == role;
    }
    
    function isAdmin() {
      // This function uses get() and CANNOT be used in rules for transactional writes.
      return isRole('Admin');
    }

    // --- Collections ---

    // Users
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isOwner(userId);
      
      // This rule is for non-admin updates. It avoids using get() so it can be used in transactions.
      allow update: if
        // Case 1: Owner updates their own profile details
        (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'avatarUrl', 'expertise'])) ||
        // Case 2: A user becomes an investor via the server action
        (isOwner(userId) && request.resource.data.role == 'Investor' && resource.data.role == 'User') ||
        // Case 3: Points are updated via an upvote transaction by another user.
        // This is the key rule that allows the upvote transaction to succeed.
        (!isOwner(userId) && isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points']));
        
      // This rule is ONLY for admin updates. It's separate because it uses get().
      allow update: if isAdmin();
      
      // Only Admins can delete users.
      allow delete: if isAdmin();
    }

    // Problems, Solutions, Ideas
    match /{collection=problems,solutions,ideas}/{docId} {
      allow read: if true;

      // Anyone authenticated can create items.
      allow create: if isAuth();

      // Updates can be for upvoting or for admin price approval.
      // This rule works because the upvote transaction only affects 'upvotes' and 'upvotedBy',
      // so the isAdmin() part of the rule (which uses get()) is not evaluated during the transaction.
      allow update: if isAuth() && 
                      (request.resource.data.diff(resource.data).affectedKeys().hasAll(['upvotes', 'upvotedBy']) ||
                       (isAdmin() && request.resource.data.priceApproved == true && resource.data.priceApproved == false)
                      );
                      
      // Only admins can delete items.
      allow delete: if isAdmin();
    }
    
    // Deals & Messages
    match /deals/{dealId} {
      function isParticipant() {
        return request.auth.uid in [
          resource.data.investor.userId, 
          resource.data.problemCreator.userId, 
          resource.data.solutionCreator.userId
        ];
      }
      
      // Only an investor can create a deal. Uses get() - cannot be in a transaction.
      allow create: if isAuth() && isRole('Investor');
      
      // Only participants can read a deal.
      allow read: if isAuth() && isParticipant();
      
      match /messages/{messageId} {
        // Only participants can read or create messages.
        // Uses get() so this cannot be part of a larger transaction.
        allow read, create: if isAuth() && (
                                  request.auth.uid == get(/databases/$(database)/documents/deals/$(dealId)).data.investor.userId ||
                                  request.auth.uid == get(/databases/$(database)/documents/deals/$(dealId)).data.problemCreator.userId ||
                                  request.auth.uid == get(/databases/$(database)/documents/deals/$(dealId)).data.solutionCreator.userId
                                );
      }
    }
    
    // Notifications
    match /notifications/{notificationId} {
      // Notifications are created server-side, so no client creation allowed.
      allow create: if false; 
      
      // Can be read/updated by the target user, or by an admin if it's an admin notification.
      allow read, update, delete: if isOwner(resource.data.userId) || (isAdmin() && resource.data.userId == 'admins');
    }
  }
}
