
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isInvestor() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Investor';
    }

    // --- USERS ---
    match /users/{userId} {
      // Anyone can read a user profile.
      allow read: if true;
      
      // A user can create their own profile record.
      allow create: if isOwner(userId);

      // Users can update specific fields on their own profile.
      // Any authenticated user can update only the 'points' field (for upvotes).
      // Admins can update anything.
      allow update: if isAdmin() ||
                      (isOwner(userId) &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .removeAll(['name', 'avatarUrl', 'expertise', 'role', 'isPremium']).size() == 0) ||
                      (isAuthenticated() &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['points']));
      
      // Only an admin can delete a user.
      allow delete: if isAdmin();
    }
    
    // --- PROBLEMS, SOLUTIONS, IDEAS ---
    match /{collectionName}/{itemId} where collectionName in ['problems', 'solutions', 'ideas'] {
      // Anyone can read.
      allow read: if true;

      // Authenticated users can create.
      allow create: if isAuthenticated();

      // The creator or an admin can update any field.
      // Any authenticated user can update only the 'upvotes' and 'upvotedBy' fields.
      allow update: if isAuthenticated() && (
                      (request.resource.data.diff(resource.data).affectedKeys()
                        .removeAll(['upvotes', 'upvotedBy']).size() == 0) ||
                      (isOwner(resource.data.creator.userId) || isAdmin())
                    );
                    
      // Only the creator or an admin can delete.
      allow delete: if isOwner(resource.data.creator.userId) || isAdmin();
    }

    // --- DEALS & MESSAGES ---
    match /deals/{dealId} {
        // Only participants or admins can read a deal.
        function isParticipant() {
          return resource.data.investor.userId == request.auth.uid ||
                 resource.data.problemCreator.userId == request.auth.uid ||
                 resource.data.solutionCreator.userId == request.auth.uid;
        }
      
        allow read: if isAdmin() || isParticipant();
                      
        // Only an investor or an admin can create a deal.
        allow create: if isInvestor() || isAdmin();
        
        // Deals are immutable once created.
        allow update: if false;
        
        // Only an admin can delete a deal.
        allow delete: if isAdmin();
        
        match /messages/{messageId} {
            // Only participants of the parent deal can read/write messages.
            allow read, create: if isAdmin() || get(/databases/$(database)/documents/deals/$(dealId)).data.investor.userId == request.auth.uid ||
                                 get(/databases/$(database)/documents/deals/$(dealId)).data.problemCreator.userId == request.auth.uid ||
                                 get(/databases/$(database)/documents/deals/$(dealId)).data.solutionCreator.userId == request.auth.uid;

            // Messages are immutable.
            allow update, delete: if false;
        }
    }
    
    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
        // A user can read their own notifications or admin-wide notifications.
        allow read: if (isOwner(resource.data.userId) || 
                       (resource.data.userId == "admins" && isAdmin()));

        // The app's server actions handle notification creation logic.
        allow create: if isAuthenticated();
        
        // A user can update their own notification (e.g., mark as read).
        allow update: if isOwner(resource.data.userId);

        allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
  }
}
