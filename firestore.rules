rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the requesting user has the 'Admin' role in their user document.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isInvestor() {
        return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Investor', 'Admin'];
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      // Users can update their own profile, or admins can update any profile.
      // We also allow the 'points' field to be updated by the upvote transaction.
      allow update: if isOwner(userId) || isAdmin() || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points']));
    }

    match /problems/{problemId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow owner/admin to update, but also allow price approval by admin
      // and upvoting by any authenticated user.
      allow update: if (resource.data.creator.userId == request.auth.uid) ||
                      (isAdmin() && request.resource.data.priceApproved == true) || 
                      (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy']));
      allow delete: if resource.data.creator.userId == request.auth.uid || isAdmin();
    }

    match /solutions/{solutionId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if (resource.data.creator.userId == request.auth.uid) ||
                      (isAdmin() && request.resource.data.priceApproved == true) || 
                      (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy']));
      allow delete: if resource.data.creator.userId == request.auth.uid || isAdmin();
    }
    
    match /ideas/{ideaId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if (resource.data.creator.userId == request.auth.uid || isAdmin()) ||
                      (request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy']));
      allow delete: if resource.data.creator.userId == request.auth.uid || isAdmin();
    }
    
    match /deals/{dealId} {
      allow create: if isInvestor();
      // Only participants or admins can read/write to the deal document itself.
      allow read, update: if request.auth.uid in [resource.data.investor.userId, resource.data.problemCreator.userId, resource.data.solutionCreator.userId] || isAdmin();
      
      // Messages can be created and read by deal participants.
      match /messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/deals/$(dealId)).data.investor.userId == request.auth.uid
                        || get(/databases/$(database)/documents/deals/$(dealId)).data.problemCreator.userId == request.auth.uid
                        || get(/databases/$(database)/documents/deals/$(dealId)).data.solutionCreator.userId == request.auth.uid
                        || isAdmin();
        allow update, delete: if false; // Messages are immutable
      }
    }
    
    match /notifications/{notificationId} {
        // Users can only read their own notifications. Admins can read admin notifications.
        allow read: if resource.data.userId == request.auth.uid || (resource.data.userId == 'admins' && isAdmin());
        // Allow any authenticated user (via server action) to create a notification.
        // In a more secure setup, this would be locked down further or handled by a trusted backend.
        allow create: if request.auth != null;
        allow update, delete: if false; // Notifications are immutable
    }
  }
}
