
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check the user's role directly from their user document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }
    
    function isInvestor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Investor';
    }
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isParticipant(dealId) {
        let deal = get(/databases/$(database)/documents/deals/$(dealId)).data;
        return request.auth.uid == deal.investor.userId || 
               request.auth.uid == deal.problemCreator.userId || 
               request.auth.uid == deal.solutionCreator.userId;
    }

    // USERS collection
    match /users/{userId} {
      allow read: if isSignedIn();
      // Any authenticated user can create their own user document.
      allow create: if isOwner(userId);
      // Allow users to update their own non-critical info.
      // Allow server actions to update points or role (for becoming an investor).
      // Allow admins to update any user's role.
      allow update: if (isOwner(userId) && !('points' in request.resource.data) && !('role' in request.resource.data) && !('isPremium' in request.resource.data))
                    || (isSignedIn() && request.resource.data.keys().hasAny(['points', 'role', 'isPremium']))
                    || isAdmin();
    }

    // PROBLEMS, SOLUTIONS, IDEAS collections
    match /{collectionName}/{itemId} where collectionName in ['problems', 'solutions', 'ideas'] {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      
      // Owner or admin can delete.
      allow delete: if isAdmin() || request.auth.uid == resource.data.creator.userId;

      // Allow updates by owner/admin, upvoting by any user, or price approval by admin.
      allow update: if (isAdmin() || request.auth.uid == resource.data.creator.userId)
                    || (isSignedIn() && request.resource.data.keys().hasOnly(['upvotes', 'upvotedBy']))
                    || (isAdmin() && request.resource.data.keys().hasOnly(['priceApproved']));
    }
    
    // DEALS collection
    match /deals/{dealId} {
      // Only an investor can create a deal.
      allow create: if isInvestor();
      // Only participants or admins can read.
      allow read: if isParticipant(dealId) || isAdmin();
      // Deals are immutable.
      allow update, delete: if false;

      // MESSAGES sub-collection
      match /messages/{messageId} {
        // Only participants or admins can read/create messages.
        allow read, create: if isParticipant(dealId) || isAdmin();
        // Messages are immutable.
        allow update, delete: if false;
      }
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
      // Server-side logic (run under user's auth) can create notifications.
      allow create: if isSignedIn();
      // Users can only read/update their own notifications.
      // Admins can read/update notifications for 'admins'.
      allow read, update: if resource.data.userId == request.auth.uid || (resource.data.userId == 'admins' && isAdmin());
      allow delete: if false;
    }
  }
}
