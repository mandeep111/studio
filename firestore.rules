rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() { return request.auth != null; }
    function isOwner(userId) { return request.auth.uid == userId; }
    function getUserRole() { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role; }
    function isRole(role) { return isSignedIn() && getUserRole() == role; }
    function isAdmin() { return isSignedIn() && getUserRole() == 'Admin'; }

    // --- Collection Rules ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);

      function isBecomingInvestor() {
        return resource.data.role != 'Investor' && request.resource.data.role == 'Investor';
      }

      function isValidSelfUpdate() {
        return request.resource.data.points == resource.data.points &&
               (request.resource.data.role == resource.data.role || isBecomingInvestor());
      }
      
      function isValidPointsUpdate() {
          let pointsDiff = request.resource.data.points - resource.data.points;
          return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points']) &&
                 (pointsDiff == 50 || pointsDiff == 20 || pointsDiff == -20);
      }

      allow update: if (isOwner(userId) && isValidSelfUpdate()) || 
                       (!isOwner(userId) && isValidPointsUpdate()) ||
                       isAdmin();
    }

    match /problems/{problemId} {
      allow read: if isSignedIn();
      allow create: if (isRole('User') || isAdmin()) && isOwner(request.resource.data.creator.userId);

      function isUpvote() { return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy']); }
      function isPriceApproval() { return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['priceApproved']); }
      function isSolutionsCountUpdate() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['solutionsCount']) &&
               request.resource.data.solutionsCount == resource.data.solutionsCount + 1;
      }
      
      allow update: if (isSignedIn() && (isUpvote() || isSolutionsCountUpdate())) || (isAdmin() && isPriceApproval());
    }

    match /solutions/{solutionId} {
        allow read: if isSignedIn();
        allow create: if (isRole('User') || isAdmin()) && isOwner(request.resource.data.creator.userId);

        function isUpvote() { return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy']); }
        function isPriceApproval() { return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['priceApproved']); }

        allow update: if (isSignedIn() && isUpvote()) || (isAdmin() && isPriceApproval());
    }
    
    match /ideas/{ideaId} {
        allow read: if isSignedIn();
        allow create: if (isRole('User') || isAdmin()) && isOwner(request.resource.data.creator.userId);
        function isUpvote() { return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy']); }
        allow update: if isSignedIn() && isUpvote();
    }
    
    match /deals/{dealId} {
        function isParticipant() {
            return request.auth.uid in [ resource.data.investor.userId, resource.data.problemCreator.userId, resource.data.solutionCreator.userId ];
        }
        allow read: if isSignedIn() && (isParticipant() || isAdmin());
        allow create: if isRole('Investor') && isOwner(request.resource.data.investor.userId);
    }
    
    match /deals/{dealId}/messages/{messageId} {
        function isDealParticipant() {
            let deal = get(/databases/$(database)/documents/deals/$(dealId)).data;
            return request.auth.uid in [ deal.investor.userId, deal.problemCreator.userId, deal.solutionCreator.userId ];
        }
        allow read, list: if isSignedIn() && (isDealParticipant() || isAdmin());
        allow create: if isSignedIn() && isDealParticipant() && isOwner(request.resource.data.sender.userId);
    }
    
    match /notifications/{notificationId} {
      function isRecipient() {
        return resource.data.userId == request.auth.uid || (resource.data.userId == 'admins' && isAdmin());
      }
      allow read, list: if isSignedIn() && isRecipient();
      allow create: if isSignedIn(); // Trusted Server Actions
    }
  }
}
