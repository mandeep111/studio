
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check if the user has an 'Admin' role in their user document.
      // This requires the user to be able to read their own document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Rules for User profiles
    match /users/{userId} {
      // Any authenticated user can create their own profile document.
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Any authenticated user can read any profile.
      allow read: if request.auth != null;
      
      // A user can only update their own profile, unless they are an admin.
      allow update: if request.auth.uid == userId || isAdmin();
    }
    
    // Rules for Problems
    match /problems/{problemId} {
      function isOwner() {
        return request.auth.uid == resource.data.creator.userId;
      }
      
      // Any authenticated user can read problems.
      allow read: if request.auth != null;
      
      // Any authenticated user can create problems.
      allow create: if request.auth != null;
      
      // Update rules for problems.
      allow update: if request.auth != null && (
        // Allow owner or admin to update all fields.
        isOwner() || isAdmin() ||
        // Allow any authenticated user to update only the 'upvotedBy' field for upvoting.
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotedBy']) ||
        // Allow incrementing solutionsCount by 1 when a new solution is added.
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['solutionsCount']) &&
         request.resource.data.solutionsCount == resource.data.solutionsCount + 1)
      );
      
      // Only the owner or an admin can delete a problem.
      allow delete: if request.auth != null && (isOwner() || isAdmin());
    }
    
    // Rules for Solutions
    match /solutions/{solutionId} {
      function isOwner() {
        return request.auth.uid == resource.data.creator.userId;
      }
      
      // Any authenticated user can read solutions.
      allow read: if request.auth != null;
      
      // Any authenticated user can create solutions.
      allow create: if request.auth != null;
      
      // Update rules for solutions.
      allow update: if request.auth != null && (
        // Allow owner or admin to update all fields.
        isOwner() || isAdmin() ||
        // Allow any authenticated user to update only the 'upvotedBy' field for upvoting.
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotedBy'])
      );
      
      // Only the owner or an admin can delete a solution.
      allow delete: if request.auth != null && (isOwner() || isAdmin());
    }

    // Rules for Ideas
    match /ideas/{ideaId} {
      function isOwner() {
        return request.auth.uid == resource.data.creator.userId;
      }

      // Any authenticated user can read ideas.
      allow read: if request.auth != null;
      
      // Any authenticated user can create ideas.
      allow create: if request.auth != null;
      
      // Update rules for ideas.
      allow update: if request.auth != null && (
        // Allow owner or admin to update all fields.
        isOwner() || isAdmin() ||
        // Allow any authenticated user to update only the 'upvotedBy' field for upvoting.
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotedBy'])
      );
      
      // Only the owner or an admin can delete an idea.
      allow delete: if request.auth != null && (isOwner() || isAdmin());
    }
  }
}
