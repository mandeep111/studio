rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Users can read any profile.
    // They can create/update their own profile.
    // Any signed-in user can update the 'points' field of another user (for upvotes).
    // Only admins can delete users.
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points']));
      allow delete: if isAdmin();
    }
    
    // Any signed-in user can read, create, or update these items.
    // Only admins can delete them.
    match /problems/{problemId} {
      allow read, create, update: if isSignedIn();
      allow delete: if isAdmin();
    }
    
    match /solutions/{solutionId} {
      allow read, create, update: if isSignedIn();
      allow delete: if isAdmin();
    }

    match /ideas/{ideaId} {
      allow read, create, update: if isSignedIn();
      allow delete: if isAdmin();
    }

    // Deals and their messages can be accessed by any signed in user.
    // A more secure rule would check if the user is a participant.
    match /deals/{dealId} {
      allow read, create, update: if isSignedIn();

      match /messages/{messageId} {
        allow read, create: if isSignedIn();
      }
    }
    
    // Notifications can be read by their target user or by an admin.
    // They are created by trusted server-side code.
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || (resource.data.userId == 'admins' && isAdmin()));
      allow create: if isSignedIn();
    }
  }
}
