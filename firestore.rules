
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // WARNING: Do not use in rules evaluated during a transaction, as get() is not allowed.
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // WARNING: Do not use in rules evaluated during a transaction.
    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'Admin';
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // READ: Admins can read any profile. Users can read their own.
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      
      // CREATE: A user can create their own document on signup.
      allow create: if isOwner(userId);
      
      // DELETE: Only admins can delete users.
      allow delete: if isAdmin();

      // UPDATE:
      // This rule is carefully structured to avoid calling get() during an upvote transaction.
      allow update: if
        // Path 1: User updating their own profile (can't change role or points).
        // This path has no get() calls.
        (
          isOwner(userId) && 
          request.resource.data.points == resource.data.points && 
          request.resource.data.role == resource.data.role
        ) ||
        // Path 2: Points update from an upvote transaction (can't be self-inflicted).
        // This path is taken by the upvote transaction. It has no get() calls.
        (
          isSignedIn() &&
          !isOwner(userId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['points'])
        ) ||
        // Path 3: Admin updating another user's role.
        // This path uses get() via isAdmin(), but is not part of the upvote transaction.
        (
          isAdmin() && 
          request.resource.data.points == resource.data.points
        );
    }

    // =================================
    // Content Collections (Problems, Solutions, Ideas)
    // =================================
    match /{collectionName}/{itemId} where collectionName in ['problems', 'solutions', 'ideas'] {
      // READ: Anyone can read content.
      allow read: if true;

      // CREATE: Only signed-in Users or Admins.
      allow create: if isSignedIn() && (getUserData(request.auth.uid).role in ['User', 'Admin']);

      // DELETE: Only Admins.
      allow delete: if isAdmin();

      // UPDATE:
      // This rule is carefully structured to avoid calling get() during an upvote transaction.
      allow update: if
        // Path 1: Any user upvoting content (not their own).
        // This is the upvote transaction path. It has no get() calls.
        (
          isSignedIn() && 
          !isOwner(resource.data.creator.userId) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'upvotedBy'])
        ) ||
        // Path 2: Owner or Admin editing content (but not upvote fields).
        // This path uses get() via isAdmin(), but is not part of the upvote transaction.
        (
          isSignedIn() && 
          (isOwner(resource.data.creator.userId) || isAdmin()) &&
          request.resource.data.upvotes == resource.data.upvotes
        );
    }
    
    // --- Price approval rule (Admin only)
    match /{collectionName}/{itemId} where collectionName in ['problems', 'solutions'] {
      allow update: if 
        isAdmin() && 
        request.resource.data.priceApproved == true && 
        resource.data.priceApproved == false;
    }


    // =================================
    // Deals and Messages
    // =================================
    match /deals/{dealId} {
      // Only participants or an Admin can read/create a deal.
      allow read, create: if isSignedIn() && (
        getUserData(request.auth.uid).role == 'Investor' ||
        request.auth.uid in [resource.data.problemCreator.userId, resource.data.solutionCreator.userId] ||
        isAdmin()
      );
      
      match /messages/{messageId} {
        // Only deal participants can read/write messages.
        allow read, create: if isSignedIn() && request.auth.uid in [
          get(/databases/$(database)/documents/deals/$(dealId)).data.investor.userId,
          get(/databases/$(database)/documents/deals/$(dealId)).data.problemCreator.userId,
          get(/databases/$(database)/documents/deals/$(dealId)).data.solutionCreator.userId
        ];
      }
    }

    // =================================
    // Notifications
    // =================================
    match /notifications/{notificationId} {
      // A user can read their own notifications, or admin-only notifications if they are an admin.
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || (isAdmin() && resource.data.userId == 'admins'));
      
      // Writes are server-side only. Client cannot create/update/delete.
      allow write: if false;
    }
  }
}
