
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(ownerId) {
      return request.auth.uid == ownerId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isNewUser() {
      return !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isDealParticipant(dealId) {
        return isSignedIn() && get(/databases/$(database)/documents/deals/$(dealId)).data.participantIds.hasAny([request.auth.uid]);
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if true; // Public read for avatars, names etc.
      allow create: if request.auth.uid == userId && isNewUser();
      allow update: if isOwner(userId) && !isUpdatingRestrictedFields();
      allow delete: if false; // Users should be deleted by admins

      function isUpdatingRestrictedFields() {
        return request.resource.data.diff(resource.data).affectedKeys().hasAny(['points', 'role', 'isPremium', 'dealsCount', 'dealsCompletedCount', 'dealsCancelledCount', 'unreadDealMessages']);
      }
    }

    // Rules for content collections (problems, solutions, ideas, businesses)
    match /{collectionName}/{itemId}
      where collectionName in ['problems', 'solutions', 'ideas', 'businesses'] {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.creator.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.creator.userId == request.auth.uid && !isUpdatingRestrictedContentFields();
      allow delete: if isSignedIn() && (isAdmin() || resource.data.creator.userId == request.auth.uid);

      function isUpdatingRestrictedContentFields() {
        return request.resource.data.diff(resource.data).affectedKeys().hasAny(['creator', 'upvotes', 'upvotedBy', 'solutionsCount', 'interestedInvestorsCount', 'priceApproved', 'isClosed', 'createdAt']);
      }
    }

    // Rules for 'deals' collection and its subcollections
    match /deals/{dealId} {
      allow read: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow create: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      
      match /messages/{messageId} {
        allow read, write: if isDealParticipant(dealId);
      }
    }
    
    // Rules for notifications
    match /notifications/{notificationId} {
      // A user can read their own notification
      allow read: if resource.data.userId == request.auth.uid;
      // An admin can read notifications for 'admins'
      allow read: if isAdmin() && resource.data.userId == 'admins';
      
      allow write: if false; // Only server can write
    }

    // Rules for admin-only collections
    match /{collectionName}/{docId}
      where collectionName in ['settings', 'tags', 'payments', 'ads'] {
      allow read: if true; // Some settings might need to be public
      allow write: if isAdmin();
    }
  }
}
