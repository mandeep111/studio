rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin(userId) {
      // Check if the user document exists and has the 'Admin' role.
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'Admin';
    }

    function isSameUser(userId) {
      return request.auth.uid == userId;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // Problems collection
    match /problems/{problemId} {
      allow read: if request.auth != null;

      // Anyone can create a problem if they are logged in and are the creator
      allow create: if request.auth != null && request.resource.data.creator.userId == request.auth.uid;

      // Only owner or admin can update or delete
      // Note: We use get() which reads the document *before* the operation.
      allow update, delete: if request.auth != null && (
        get(/databases/$(database)/documents/problems/$(problemId)).data.creator.userId == request.auth.uid || 
        isAdmin(request.auth.uid)
      );
    }
    
    // Solutions collection
    match /solutions/{solutionId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null && request.resource.data.creator.userId == request.auth.uid;
      
      allow update, delete: if request.auth != null && (
        get(/databases/$(database)/documents/solutions/$(solutionId)).data.creator.userId == request.auth.uid || 
        isAdmin(request.auth.uid)
      );
    }

    // Ideas collection
    match /ideas/{ideaId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null && request.resource.data.creator.userId == request.auth.uid;

      allow update, delete: if request.auth != null && (
        get(/databases/$(database)/documents/ideas/$(ideaId)).data.creator.userId == request.auth.uid || 
        isAdmin(request.auth.uid)
      );
    }
    
    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can read profiles
      allow read: if request.auth != null;
      
      // A user can create their own profile document
      allow create: if request.auth != null && isSameUser(userId);

      // A user can update their own profile, or an admin can
      allow update: if request.auth != null && (isSameUser(userId) || isAdmin(request.auth.uid));

      // Only an admin can delete a user profile
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
