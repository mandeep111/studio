rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user is authenticated and if their user document has the role 'Admin'.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isInvestor() {
      // Check if the user is authenticated and if their user document has the role 'Investor'.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Investor';
    }
    
    function isPremiumOrAdmin() {
      return isSignedIn() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isPremium == true || isAdmin());
    }

    function isSameUserOrAdmin(userId) {
      return isOwner(userId) || isAdmin();
    }
    
    function isDealParticipant(dealId) {
        return isSignedIn() && get(/databases/$(database)/documents/deals/$(dealId)).data.participantIds.hasAny([request.auth.uid]);
    }
    
    // Validate that incoming data for a user profile update does not change protected fields.
    function userProfileUpdateIsValid() {
        let isChangingRole = request.resource.data.role != resource.data.role;
        let isChangingPoints = request.resource.data.points != resource.data.points;
        let isChangingPremium = request.resource.data.isPremium != resource.data.isPremium;

        return !isChangingRole && !isChangingPoints && !isChangingPremium;
    }

    // Collection Rules
    match /users/{userId} {
      // Anyone can read user profiles to see names, avatars, expertise.
      allow read: if true;
      // Signup is handled by Firebase Auth, this rule allows creating the user doc.
      // Only allow creation if the user is creating their own document.
      allow create: if isOwner(userId);
      // Users can only update their own profile, with certain field restrictions.
      allow update: if isOwner(userId) && userProfileUpdateIsValid();
      // Only an admin can delete a user.
      allow delete: if isAdmin();
    }
    
    match /problems/{problemId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSameUserOrAdmin(resource.data.creator.userId);
      allow delete: if isSameUserOrAdmin(resource.data.creator.userId);
    }

    match /solutions/{solutionId} {
      // Solutions can be partially hidden, read access is allowed.
      // Client logic should handle what to show based on user role/deal status.
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSameUserOrAdmin(resource.data.creator.userId);
      allow delete: if isSameUserOrAdmin(resource.data.creator.userId);
    }
    
    match /ideas/{ideaId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSameUserOrAdmin(resource.data.creator.userId);
      allow delete: if isSameUserOrAdmin(resource.data.creator.userId);
    }
    
    match /businesses/{businessId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSameUserOrAdmin(resource.data.creator.userId);
      allow delete: if isSameUserOrAdmin(resource.data.creator.userId);
    }
    
    match /tags/{tagId} {
      allow read: if true;
      allow write: if isSignedIn(); // Allow authenticated users to add tags
    }

    match /deals/{dealId} {
      // Only participants can read deal details.
      allow read: if isDealParticipant(dealId);
      // Creating a deal is handled via a server action which will have admin privileges.
      // The rule here is for client-side security. Only investors can create deals.
      allow create: if isInvestor();
      // Only participants can update a deal (e.g. status).
      allow update: if isDealParticipant(dealId);
      allow delete: if isAdmin(); // Only admin can delete deals
    }
    
    match /deals/{dealId}/messages/{messageId} {
      // Only participants of the deal can read or write messages.
      allow read: if isDealParticipant(dealId);
      allow create: if isDealParticipant(dealId);
      allow update, delete: if false; // Messages are immutable
    }

    match /notifications/{notificationId} {
        // A user can only read their own notifications.
        allow read, update, delete: if isOwner(resource.data.userId);
        // Creation is handled by a server action
        allow create: if isSignedIn();
    }
    
    match /settings/{settingId} {
      // Settings are public to read.
      allow read: if true;
      // Only admins can change settings.
      allow write: if isAdmin();
    }
    
    match /ads/{adId} {
      // Ads are public to read
      allow read: if true;
      // Only admins can create/update/delete ads
      allow write: if isAdmin();
    }

    match /payments/{paymentId} {
      // Only admins can read payment history.
      allow read: if isAdmin();
      // Payments are created via server actions (webhooks).
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
